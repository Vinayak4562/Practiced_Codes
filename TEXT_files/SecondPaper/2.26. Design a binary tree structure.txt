26. Design a binary tree structure in python/any preferred language in such a way that it is in the form of a triangle and built on AND logic. Initially it looks like the below structure.
L6 1
L5 1 1
L4 1 1 1
L3 1 1 1 1
L2 1 1 1 1 1
L1 1 1 1 1 1 1
If any value at L1 level is updated then the whole tree should get updated accordingly. For example, if third value at L1 level is updated to 0 then the tree should get updated as below.
L6 0
L5 0 0
L4 0 0 0
L3 0 0 0 1
L2 1 0 0 1 1
L1 1 1 0 1 1 1


class BinaryTriangle:
    def __init__(self, n):
        self.levels = []
        for i in range(1, n+1):
            self.levels.append([1]*i)
            
    def __str__(self):
        res = ''
        for i in range(len(self.levels)):
            res += 'L{} '.format(i+1)
            res += ' '.join(str(val) for val in self.levels[i])
            res += '\n'
        return res
            
    def update(self, index, val):
        self.levels[-1][index] = val
        for i in range(len(self.levels)-2, -1, -1):
            for j in range(i+1):
                self.levels[i][j] = self.levels[i+1][j] and self.levels[i+1][j+1]

                
bt = BinaryTriangle(6)
print(bt)  # prints the initial triangle


bt.update(2, 0)
print(bt)  # prints the updated triangle



29--------------------------------------------------------------------------------
import re

tag = input("enter the tag: ")
x = re.findall("<\w{5,}[^>]*>|<\/\w{5,}[^>]*>",tag)

print(x)
# enter the tag: <param> </paramod>
# OUT-PUT=['<param>', '</paramod>']

# enter the tag: <param>'HELLO" </param>  
# OUT-PUT=['<param>', '</param>']
----------------------------------------------------------------------------------
